#version 430 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding=0) buffer MeshVertexPos{	
	vec4 vertexPos[];
};

layout(std430, binding=1) buffer MeshVertexIdx{	
	uint vertexIdx[];
};

layout(std430, binding=2) buffer TriangleArea{
	float areas[];
};

void main(){
	uint k = gl_WorkGroupID.x;			// k= 0, 1
	uint w = gl_WorkGroupID.y;			// w= 0, 1, ..., wNum-1	wNum: 36
	uint h = gl_WorkGroupID.z;			// h= 0, 1, ...	, hNum-1		hNum: 20
	uint wNum = gl_NumWorkGroups.y;

	uint idx = ( h * wNum + w ) * 2 + k;
	
	vec4 a = vertexPos[vertexIdx[idx*3 + 0]];
	vec4 b = vertexPos[vertexIdx[idx*3 + 1]];
	vec4 c = vertexPos[vertexIdx[idx*3 + 2]];

	vec3 v1 = vec3(b - a);
	vec3 v2 = vec3(c - a);
	
    areas[ idx ] = length(cross(v1, v2)) / 2.0f;
}
