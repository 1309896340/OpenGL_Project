#version 430 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding=0) buffer MeshVertexPos{	
	vec4 vertexPos[];
};

layout(std430, binding=1) buffer MeshVertexIdx{	
	uint vertexIdx[];
};

layout(std430, binding=2) buffer TriangleArea{		// 用于记录三角形面积
	float areas[];
};

void main(){
	// uint h = gl_WorkGroupID.x;
	// uint w = gl_WorkGroupID.y;
	// uint k = gl_WorkGroupID.z;
	// uint wNum = gl_NumWorkGroups.y;

	// 这里要注意CS中是以x优先变动的，所以x对应的是k，y对应的是w，z对应的是h
	uint idx = gl_LocalInvocationIndex;		// 三角形索引

	vec4 a = vertexPos[vertexIdx[idx*3 + 0]];
	vec4 b = vertexPos[vertexIdx[idx*3 + 1]];
	vec4 c = vertexPos[vertexIdx[idx*3 + 2]];

	vec3 v1 = vec3(b - a);
	vec3 v2 = vec3(c - a);
	
    // areas[ (h * wNum + w ) * 2 + k] = length(cross(v1, v2)) / 2.0f;
    areas[ idx ] = length(cross(v1, v2)) / 2.0f;
}
